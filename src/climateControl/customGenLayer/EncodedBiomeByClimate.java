
package climateControl.customGenLayer;


import climateControl.BiomeRandomizer;
import climateControl.utils.IntRandomizer;
import climateControl.ClimateControl;

import climateControl.api.ClimateControlSettings;
import climateControl.utils.Zeno410Logger;
import java.util.logging.Logger;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;
/**
 *
 * @author MasterCaver modified by Zeno410
 */
public abstract class EncodedBiomeByClimate extends GenLayer {
    public static Logger logger = new Zeno410Logger("EncodedBiomeByClimate").logger();

    private BiomeRandomizer biomeRandomizer;

    private IntRandomizer randomCallback;

    private BiomeRandomizer.PickByClimate pickByClimate;

    //private PlaneLocated<Integer> biomes = new PlaneLocated<Integer>();
    //private PlaneLocated<Integer> climates = new PlaneLocated<Integer>();
    public EncodedBiomeByClimate(long par1, GenLayer par3GenLayer, ClimateControlSettings settings){

        super(par1);
        this.parent = par3GenLayer;

        /*this.randomBiomeList = new BiomeGenBase[] {BiomeGenBase.desert, BiomeGenBase.desert, BiomeGenBase.savanna,
            BiomeGenBase.plains, BiomeGenBase.plains, BiomeGenBase.forest, BiomeGenBase.forest,
            BiomeGenBase.roofedForest, BiomeGenBase.extremeHills, BiomeGenBase.extremeHills,
            BiomeGenBase.birchForest, BiomeGenBase.swampland, BiomeGenBase.swampland, BiomeGenBase.taiga,
            BiomeGenBase.icePlains, BiomeGenBase.coldTaiga, BiomeGenBase.mesaPlateau, BiomeGenBase.mesaPlateau_F,
            BiomeGenBase.megaTaiga, BiomeGenBase.jungle, BiomeGenBase.jungle};*/


        biomeRandomizer = new BiomeRandomizer(settings.biomeSettings());
        pickByClimate = biomeRandomizer.pickByClimate();
        randomCallback = new IntRandomizer() {
            public int nextInt(int maximum) {
                return EncodedBiomeByClimate.this.nextInt(maximum);
            }
        };
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int par1, int par2, int par3, int par4)
    {
        int[] parentVals = this.parent.getInts(par1-1, par2-1, par3+2, par4+2);
        int[] aint1 = IntCache.getIntCache(par3 * par4);

        for (int i1 = 0; i1 < par4; ++i1)
        {
            for (int j1 = 0; j1 < par3; ++j1)
            {
                this.initChunkSeed((long)(j1 + par1), (long)(i1 + par2));
                int k1 = parentVals[j1+1 + (i1+1) * (par3+2)];
                k1 &= -3841;
                 if (k1 > 256) {
                        if (ClimateControl.testing) {
                        ClimateControl.logger.info(parent.toString());
                        ClimateControl.logger.info("number "+k1+ " from "+parentVals[j1+1 + (i1+1) * (par3+2)]);
                    throw new RuntimeException();
                    }

                }
                //ClimateControl.logger.info(""+k1);

                //climates.confirm(new PlaneLocation(j1+par1,i1+par2), k1);
                int biome;
                if ((isBiomeOceanic(k1))){
                    biome = k1;
                }
                else if (k1 == BiomeGenBase.mushroomIsland.biomeID){
                    biome = k1;
                } else {
                    this.initChunkSeed((long)(j1 + par1), (long)(i1 + par2));
                    biome = pickByClimate.biome(k1, randomCallback);
                    if (biome == 0) throw new RuntimeException();
                }
                setEncode(j1,i1,par1,par2,par3,biome, parentVals, aint1);
                logger.info("("+(i1+par2)+","+(j1+par1)+") Climate "+k1 + " " + parentVals[j1+1 + (i1+1) * (par3+2)]+" Biome " + aint1[j1 + i1 * par3]);
            }
        }
        return aint1;
    }

    private void setEncode(int j1, int i1, int par1, int par2, int par3, int biome, int [] parentVals, int [] aint1) {
         this.initChunkSeed((long)(j1 + par1), (long)(i1 + par2)); // we want a standard encoding per locale
         int code = nextInt(Integer.MAX_VALUE);
         // code to outgoing
         aint1[j1 + i1 * par3] = encoded(code, biome);;
    }

    abstract int encoded(int code, int biome) ;
}