
package climateControl.customGenLayer;


import climateControl.api.ClimateControlRules;
import climateControl.genLayerPack.GenLayerPack;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.GenLayerRiverMix;
import net.minecraft.world.gen.layer.IntCache;

public class GenLayerLowlandRiverMix extends GenLayerRiverMix
{
    private GenLayer biomePatternGeneratorChain;
    private GenLayer riverPatternGeneratorChain;
    private ClimateControlRules rules;
    private float maxChasm;

    public GenLayerLowlandRiverMix(long par1, GenLayer par3GenLayer, GenLayer par4GenLayer, float maxChasm,
            ClimateControlRules rules)
    {
        super(par1,par3GenLayer,par4GenLayer);
        if (!(par3GenLayer instanceof GenLayerPack)) throw new RuntimeException();
        if (!(par4GenLayer instanceof GenLayerPack)) throw new RuntimeException();
        this.biomePatternGeneratorChain = par3GenLayer;
        this.riverPatternGeneratorChain = par4GenLayer;
        this.maxChasm= maxChasm;
        this.rules = rules;
    }

    /**
     * Initialize layer's local worldGenSeed based on its own baseSeed and the world's global seed (passed in as an
     * argument).
     */
    public void initWorldGenSeed(long par1)
    {
        this.biomePatternGeneratorChain.initWorldGenSeed(par1);
        this.riverPatternGeneratorChain.initWorldGenSeed(par1);
        super.initWorldGenSeed(par1);
    }

    public GenLayer forLocking() {
        return biomePatternGeneratorChain;
    }
    
    public void setMaxChasm(float newValue) {
        this.maxChasm = newValue;
    }
    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int par1, int par2, int par3, int par4)
    {
        int[] aint = this.biomePatternGeneratorChain.getInts(par1, par2, par3, par4);
        int[] aint1 = this.riverPatternGeneratorChain.getInts(par1, par2, par3, par4);
        int[] aint2 = IntCache.getIntCache(par3 * par4);

        for (int i1 = 0; i1 < par3 * par4; ++i1)
        {
            if (aint[i1] != BiomeGenBase.ocean.biomeID && aint[i1] != BiomeGenBase.deepOcean.biomeID)
            {
                if (aint1[i1] == BiomeGenBase.river.biomeID)
                {
                    int biomeID = aint[i1];
                    BiomeGenBase biome = BiomeGenBase.getBiome(biomeID);
                    float height = biome.rootHeight + biome.heightVariation;
                    if ((height>maxChasm)||rules.riversDisallowed(biomeID)) {
                            aint2[i1] = aint[i1];

                    } else {
                        if (biome.getTempCategory() == BiomeGenBase.TempCategory.COLD){
                            aint2[i1] = BiomeGenBase.frozenRiver.biomeID;
                        } else if (aint[i1] != BiomeGenBase.mushroomIsland.biomeID
                                && aint[i1] != BiomeGenBase.mushroomIslandShore.biomeID){
                                aint2[i1] = aint1[i1] & 255;
                        } else {
                            aint2[i1] = BiomeGenBase.mushroomIslandShore.biomeID;
                        }
                    }
                }
                else
                {
                    aint2[i1] = aint[i1];
                }
            }
            else
            {
                aint2[i1] = aint[i1];
            }
            if (aint2[i1] >256) throw new RuntimeException();
        }

        return aint2;
    }
}