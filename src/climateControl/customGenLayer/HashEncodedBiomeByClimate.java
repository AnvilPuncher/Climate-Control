
package climateControl.customGenLayer;

import climateControl.BiomeRandomizer;
import climateControl.utils.IntRandomizer;
import climateControl.ClimateControl;

import climateControl.generator.Decoder;
import climateControl.generator.Encoder;
import climateControl.utils.Acceptor;
import climateControl.utils.PlaneLocated;
import climateControl.utils.PlaneLocation;
import climateControl.utils.Zeno410Logger;
import java.util.HashSet;
import net.minecraft.world.gen.layer.GenLayer;
/**
 *
 * @author MasterCaver modified by Zeno410
 */
public class HashEncodedBiomeByClimate extends EncodedBiomeByClimate {


    private final Acceptor<Decoder> forBiomeEncoding;
    private final Acceptor<Decoder>forClimateEncoding;
    private Encoder biomeEncoding;

    //private PlaneLocated<Integer> biomes = new PlaneLocated<Integer>();
    //private PlaneLocated<Integer> climates = new PlaneLocated<Integer>();
    public HashEncodedBiomeByClimate(long par1, GenLayer par3GenLayer,
            Acceptor<Decoder> forBiomeEncoding,
            Acceptor<Decoder> forClimateEncoding){

        super(par1,par3GenLayer);
        this.parent = par3GenLayer;

        /*this.randomBiomeList = new BiomeGenBase[] {BiomeGenBase.desert, BiomeGenBase.desert, BiomeGenBase.savanna,
            BiomeGenBase.plains, BiomeGenBase.plains, BiomeGenBase.forest, BiomeGenBase.forest,
            BiomeGenBase.roofedForest, BiomeGenBase.extremeHills, BiomeGenBase.extremeHills,
            BiomeGenBase.birchForest, BiomeGenBase.swampland, BiomeGenBase.swampland, BiomeGenBase.taiga,
            BiomeGenBase.icePlains, BiomeGenBase.coldTaiga, BiomeGenBase.mesaPlateau, BiomeGenBase.mesaPlateau_F,
            BiomeGenBase.megaTaiga, BiomeGenBase.jungle, BiomeGenBase.jungle};*/


        this.forBiomeEncoding =forBiomeEncoding;
        this.forClimateEncoding = forClimateEncoding;
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int par1, int par2, int par3, int par4){
        biomeEncoding = new Encoder((par3+2)*(par4+2));
        Encoder climateEncoding = new Encoder((par3+2)*(par4+2));
        int [] aint1 = super.getInts(par1, par2, par3, par4);
        this.forBiomeEncoding.accept(biomeEncoding);
        this.forClimateEncoding.accept(climateEncoding);
        return aint1;
    }

    private void setEncode(int j1, int i1, int par1, int par2, int par3, int biome, Encoder biomeEncoding, Encoder climateEncoding, int [] parentVals, int [] aint1) {
         this.initChunkSeed((long)(j1 + par1), (long)(i1 + par2)); // we want a standard encoding per locale
         int code = nextInt(Integer.MAX_VALUE);
         // code to outgoing
         aint1[j1 + i1 * par3] = code;
         /*if (biomes.confirm(new PlaneLocation((j1 + par1),i1 + par2), code)) {}
         else {
             logger.info("("+(i1+par2)+","+(j1+par1)+") Biome "+biome + " Climate " + parentVals[j1+1 + (i1+1) * (par3+2)]+" Biome " + aint1[j1 + i1 * par3]);
             throw new RuntimeException();
         }*/
         biomeEncoding.encode(code, biome);
         int climate = parentVals[j1+1 + (i1+1) * (par3+2)];
         if (climate == 0) {
             HashSet<Integer> possibles = new HashSet<Integer>();
             climate = parentVals[j1 + (i1+1) * par3];
             if ((climate >0)&&(climate<5)) possibles.add(climate);
             climate = parentVals[j1+1 + (i1) * par3];
             if ((climate >0)&&(climate<5)) possibles.add(climate);
             climate = parentVals[j1+2 + (i1+1) * par3];
             if ((climate >0)&&(climate<5)) possibles.add(climate);
             climate = parentVals[j1+1 + (i1+2) * par3];
             if ((climate >0)&&(climate<5)) possibles.add(climate);
             if (possibles.size()>0) {

             } else {
                 // nothing adjacent to use
                 //climate = 0;
             }
         }
         if (climate>4) climate = 0;
         climateEncoding.encode(code,climate);
    }

    @Override
    final int encoded(int code, int biome) {
        biomeEncoding.encode(code, biome);
        return code;
    }
}